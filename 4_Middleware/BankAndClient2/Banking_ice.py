# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Banking.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Banking
_M_Banking = Ice.openModule('Banking')
__name__ = 'Banking'

if 'Currency' not in _M_Banking.__dict__:
    _M_Banking.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.PLN = Currency("PLN", 1)
    Currency.EUR = Currency("EUR", 2)
    Currency.CHF = Currency("CHF", 3)
    Currency.CAD = Currency("CAD", 4)
    Currency.USD = Currency("USD", 5)
    Currency._enumerators = { 1:Currency.PLN, 2:Currency.EUR, 3:Currency.CHF, 4:Currency.CAD, 5:Currency.USD }

    _M_Banking._t_Currency = IcePy.defineEnum('::Banking::Currency', Currency, (), Currency._enumerators)

    _M_Banking.Currency = Currency
    del Currency

if 'AccountType' not in _M_Banking.__dict__:
    _M_Banking.AccountType = Ice.createTempClass()
    class AccountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AccountType.STANDARD = AccountType("STANDARD", 1)
    AccountType.PREMIUM = AccountType("PREMIUM", 2)
    AccountType._enumerators = { 1:AccountType.STANDARD, 2:AccountType.PREMIUM }

    _M_Banking._t_AccountType = IcePy.defineEnum('::Banking::AccountType', AccountType, (), AccountType._enumerators)

    _M_Banking.AccountType = AccountType
    del AccountType

if '_t_Balance' not in _M_Banking.__dict__:
    _M_Banking._t_Balance = IcePy.defineDictionary('::Banking::Balance', (), _M_Banking._t_Currency, IcePy._t_double)

if 'AccountDetails' not in _M_Banking.__dict__:
    _M_Banking.AccountDetails = Ice.createTempClass()
    class AccountDetails(object):
        def __init__(self, type=_M_Banking.AccountType.STANDARD, declaredIncome=0.0, balance=None):
            self.type = type
            self.declaredIncome = declaredIncome
            self.balance = balance

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Banking.AccountDetails):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.declaredIncome != other.declaredIncome:
                    return False
                if self.balance != other.balance:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_AccountDetails)

        __repr__ = __str__

    _M_Banking._t_AccountDetails = IcePy.defineStruct('::Banking::AccountDetails', AccountDetails, (), (
        ('type', (), _M_Banking._t_AccountType),
        ('declaredIncome', (), IcePy._t_double),
        ('balance', (), _M_Banking._t_Balance)
    ))

    _M_Banking.AccountDetails = AccountDetails
    del AccountDetails

_M_Banking._t_Account = IcePy.defineValue('::Banking::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Banking.__dict__:
    _M_Banking.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getDetails(self, context=None):
            return _M_Banking.Account._op_getDetails.invoke(self, ((), context))

        def getDetailsAsync(self, context=None):
            return _M_Banking.Account._op_getDetails.invokeAsync(self, ((), context))

        def begin_getDetails(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.Account._op_getDetails.begin(self, ((), _response, _ex, _sent, context))

        def end_getDetails(self, _r):
            return _M_Banking.Account._op_getDetails.end(self, _r)

        def makeDeposit(self, currency, amount, context=None):
            return _M_Banking.Account._op_makeDeposit.invoke(self, ((currency, amount), context))

        def makeDepositAsync(self, currency, amount, context=None):
            return _M_Banking.Account._op_makeDeposit.invokeAsync(self, ((currency, amount), context))

        def begin_makeDeposit(self, currency, amount, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.Account._op_makeDeposit.begin(self, ((currency, amount), _response, _ex, _sent, context))

        def end_makeDeposit(self, _r):
            return _M_Banking.Account._op_makeDeposit.end(self, _r)

        def makeWithdrawal(self, currency, amount, context=None):
            return _M_Banking.Account._op_makeWithdrawal.invoke(self, ((currency, amount), context))

        def makeWithdrawalAsync(self, currency, amount, context=None):
            return _M_Banking.Account._op_makeWithdrawal.invokeAsync(self, ((currency, amount), context))

        def begin_makeWithdrawal(self, currency, amount, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.Account._op_makeWithdrawal.begin(self, ((currency, amount), _response, _ex, _sent, context))

        def end_makeWithdrawal(self, _r):
            return _M_Banking.Account._op_makeWithdrawal.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Banking.AccountPrx.ice_checkedCast(proxy, '::Banking::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Banking.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Banking::Account'
    _M_Banking._t_AccountPrx = IcePy.defineProxy('::Banking::Account', AccountPrx)

    _M_Banking.AccountPrx = AccountPrx
    del AccountPrx

    _M_Banking.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Banking::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Banking::Account'

        @staticmethod
        def ice_staticId():
            return '::Banking::Account'

        def getDetails(self, current=None):
            raise NotImplementedError("servant method 'getDetails' not implemented")

        def makeDeposit(self, currency, amount, current=None):
            raise NotImplementedError("servant method 'makeDeposit' not implemented")

        def makeWithdrawal(self, currency, amount, current=None):
            raise NotImplementedError("servant method 'makeWithdrawal' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_AccountDisp)

        __repr__ = __str__

    _M_Banking._t_AccountDisp = IcePy.defineClass('::Banking::Account', Account, (), None, ())
    Account._ice_type = _M_Banking._t_AccountDisp

    Account._op_getDetails = IcePy.Operation('getDetails', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Banking._t_AccountDetails, False, 0), ())
    Account._op_makeDeposit = IcePy.Operation('makeDeposit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Banking._t_Currency, False, 0), ((), IcePy._t_double, False, 0)), (), None, ())
    Account._op_makeWithdrawal = IcePy.Operation('makeWithdrawal', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Banking._t_Currency, False, 0), ((), IcePy._t_double, False, 0)), (), None, ())

    _M_Banking.Account = Account
    del Account

if 'LoanCosts' not in _M_Banking.__dict__:
    _M_Banking.LoanCosts = Ice.createTempClass()
    class LoanCosts(object):
        def __init__(self, baseCurrency=0.0, targetCurrency=0.0):
            self.baseCurrency = baseCurrency
            self.targetCurrency = targetCurrency

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Banking.LoanCosts):
                return NotImplemented
            else:
                if self.baseCurrency != other.baseCurrency:
                    return False
                if self.targetCurrency != other.targetCurrency:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_LoanCosts)

        __repr__ = __str__

    _M_Banking._t_LoanCosts = IcePy.defineStruct('::Banking::LoanCosts', LoanCosts, (), (
        ('baseCurrency', (), IcePy._t_double),
        ('targetCurrency', (), IcePy._t_double)
    ))

    _M_Banking.LoanCosts = LoanCosts
    del LoanCosts

_M_Banking._t_PremiumAccount = IcePy.defineValue('::Banking::PremiumAccount', Ice.Value, -1, (), False, True, None, ())

if 'PremiumAccountPrx' not in _M_Banking.__dict__:
    _M_Banking.PremiumAccountPrx = Ice.createTempClass()
    class PremiumAccountPrx(_M_Banking.AccountPrx):

        def calculateLoanCosts(self, currency, amount, duration, context=None):
            return _M_Banking.PremiumAccount._op_calculateLoanCosts.invoke(self, ((currency, amount, duration), context))

        def calculateLoanCostsAsync(self, currency, amount, duration, context=None):
            return _M_Banking.PremiumAccount._op_calculateLoanCosts.invokeAsync(self, ((currency, amount, duration), context))

        def begin_calculateLoanCosts(self, currency, amount, duration, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.PremiumAccount._op_calculateLoanCosts.begin(self, ((currency, amount, duration), _response, _ex, _sent, context))

        def end_calculateLoanCosts(self, _r):
            return _M_Banking.PremiumAccount._op_calculateLoanCosts.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Banking.PremiumAccountPrx.ice_checkedCast(proxy, '::Banking::PremiumAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Banking.PremiumAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Banking::PremiumAccount'
    _M_Banking._t_PremiumAccountPrx = IcePy.defineProxy('::Banking::PremiumAccount', PremiumAccountPrx)

    _M_Banking.PremiumAccountPrx = PremiumAccountPrx
    del PremiumAccountPrx

    _M_Banking.PremiumAccount = Ice.createTempClass()
    class PremiumAccount(_M_Banking.Account):

        def ice_ids(self, current=None):
            return ('::Banking::Account', '::Banking::PremiumAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Banking::PremiumAccount'

        @staticmethod
        def ice_staticId():
            return '::Banking::PremiumAccount'

        def calculateLoanCosts(self, currency, amount, duration, current=None):
            raise NotImplementedError("servant method 'calculateLoanCosts' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_PremiumAccountDisp)

        __repr__ = __str__

    _M_Banking._t_PremiumAccountDisp = IcePy.defineClass('::Banking::PremiumAccount', PremiumAccount, (), None, (_M_Banking._t_AccountDisp,))
    PremiumAccount._ice_type = _M_Banking._t_PremiumAccountDisp

    PremiumAccount._op_calculateLoanCosts = IcePy.Operation('calculateLoanCosts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Banking._t_Currency, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Banking._t_LoanCosts, False, 0), ())

    _M_Banking.PremiumAccount = PremiumAccount
    del PremiumAccount

if 'RegistrationInfo' not in _M_Banking.__dict__:
    _M_Banking.RegistrationInfo = Ice.createTempClass()
    class RegistrationInfo(object):
        def __init__(self, type=_M_Banking.AccountType.STANDARD, password='', accountHandle=None):
            self.type = type
            self.password = password
            self.accountHandle = accountHandle

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Banking.RegistrationInfo):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.password != other.password:
                    return False
                if self.accountHandle != other.accountHandle:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_RegistrationInfo)

        __repr__ = __str__

    _M_Banking._t_RegistrationInfo = IcePy.defineStruct('::Banking::RegistrationInfo', RegistrationInfo, (), (
        ('type', (), _M_Banking._t_AccountType),
        ('password', (), IcePy._t_string),
        ('accountHandle', (), _M_Banking._t_AccountPrx)
    ))

    _M_Banking.RegistrationInfo = RegistrationInfo
    del RegistrationInfo

if 'AccountAccessInfo' not in _M_Banking.__dict__:
    _M_Banking.AccountAccessInfo = Ice.createTempClass()
    class AccountAccessInfo(object):
        def __init__(self, type=_M_Banking.AccountType.STANDARD, accountHandle=None):
            self.type = type
            self.accountHandle = accountHandle

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Banking.AccountAccessInfo):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.accountHandle != other.accountHandle:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_AccountAccessInfo)

        __repr__ = __str__

    _M_Banking._t_AccountAccessInfo = IcePy.defineStruct('::Banking::AccountAccessInfo', AccountAccessInfo, (), (
        ('type', (), _M_Banking._t_AccountType),
        ('accountHandle', (), _M_Banking._t_AccountPrx)
    ))

    _M_Banking.AccountAccessInfo = AccountAccessInfo
    del AccountAccessInfo

_M_Banking._t_Bank = IcePy.defineValue('::Banking::Bank', Ice.Value, -1, (), False, True, None, ())

if 'BankPrx' not in _M_Banking.__dict__:
    _M_Banking.BankPrx = Ice.createTempClass()
    class BankPrx(Ice.ObjectPrx):

        def registerNewAccount(self, UID, fullname, declaredIncome, context=None):
            return _M_Banking.Bank._op_registerNewAccount.invoke(self, ((UID, fullname, declaredIncome), context))

        def registerNewAccountAsync(self, UID, fullname, declaredIncome, context=None):
            return _M_Banking.Bank._op_registerNewAccount.invokeAsync(self, ((UID, fullname, declaredIncome), context))

        def begin_registerNewAccount(self, UID, fullname, declaredIncome, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.Bank._op_registerNewAccount.begin(self, ((UID, fullname, declaredIncome), _response, _ex, _sent, context))

        def end_registerNewAccount(self, _r):
            return _M_Banking.Bank._op_registerNewAccount.end(self, _r)

        def getAccountHandle(self, UID, context=None):
            return _M_Banking.Bank._op_getAccountHandle.invoke(self, ((UID, ), context))

        def getAccountHandleAsync(self, UID, context=None):
            return _M_Banking.Bank._op_getAccountHandle.invokeAsync(self, ((UID, ), context))

        def begin_getAccountHandle(self, UID, _response=None, _ex=None, _sent=None, context=None):
            return _M_Banking.Bank._op_getAccountHandle.begin(self, ((UID, ), _response, _ex, _sent, context))

        def end_getAccountHandle(self, _r):
            return _M_Banking.Bank._op_getAccountHandle.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Banking.BankPrx.ice_checkedCast(proxy, '::Banking::Bank', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Banking.BankPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Banking::Bank'
    _M_Banking._t_BankPrx = IcePy.defineProxy('::Banking::Bank', BankPrx)

    _M_Banking.BankPrx = BankPrx
    del BankPrx

    _M_Banking.Bank = Ice.createTempClass()
    class Bank(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Banking::Bank', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Banking::Bank'

        @staticmethod
        def ice_staticId():
            return '::Banking::Bank'

        def registerNewAccount(self, UID, fullname, declaredIncome, current=None):
            raise NotImplementedError("servant method 'registerNewAccount' not implemented")

        def getAccountHandle(self, UID, current=None):
            raise NotImplementedError("servant method 'getAccountHandle' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Banking._t_BankDisp)

        __repr__ = __str__

    _M_Banking._t_BankDisp = IcePy.defineClass('::Banking::Bank', Bank, (), None, ())
    Bank._ice_type = _M_Banking._t_BankDisp

    Bank._op_registerNewAccount = IcePy.Operation('registerNewAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0)), (), ((), _M_Banking._t_RegistrationInfo, False, 0), ())
    Bank._op_getAccountHandle = IcePy.Operation('getAccountHandle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Banking._t_AccountAccessInfo, False, 0), ())

    _M_Banking.Bank = Bank
    del Bank

# End of module Banking
